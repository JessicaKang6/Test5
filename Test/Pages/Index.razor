@page "/"

<style>
    #gameDIV {
    visibility: @gameVisibilityStatus;
}
.startButton{
    visibility: @startButtonVisibility;
}
.modeButton{
    visibility: @modeButtonVisibility;
}
#additionSubmit{
    visibility: @additionSubmitVisibility;
}
#backButton{
    visibility: @backButtonVisibility;
}
#resetButton{
    visibility: @resetButtonVisibility;
}
#gameOver{
    visibility: @gameOverVisibility;
}
.error{
    color: red;
}
.correct{
    color:green;
}
.score{
    color:blue;
}

/*countdown styling*/
.base-timer {
  position: relative;
  height: 300px;
  width: 300px;
}

/* Removes SVG styling that would hide the time label */
.base-timer__circle {
  fill: none;
  stroke: none;
}

/* The SVG path that displays the timer's progress */
.base-timer__path-elapsed {
  stroke-width: 7px;
  stroke: grey;
}
.base-timer__label {
  position: absolute;
  
  /* Size should match the parent container */
  width: 300px;
  height: 300px;
  
  /* Keep the label aligned to the top */
  top: 0;
  
  /* Create a flexible box that centers content vertically and horizontally */
  display: flex;
  align-items: center;
  justify-content: center;

  /* Sort of an arbitrary number; adjust to your liking */
  font-size: 48px;
}
.base-timer__path-remaining {
  /* Just as thick as the original ring */
  stroke-width: 7px;

  /* Rounds the line endings to create a seamless circle */
  stroke-linecap: round;

  /* Makes sure the animation starts at the top of the circle */
  transform: rotate(90deg);
  transform-origin: center;

  /* One second aligns with the speed of the countdown timer */
  transition: 1s linear all;

  /* Allows the ring to change color when the color value updates */
  stroke: green;
}

.base-timer__svg {
  /* Flips the svg and makes the animation to move left-to-right */
  transform: scaleX(-1);
}
const COLOR_CODES = {
  info: {
    color: "green"
  }
}


}
</style>
<PageTitle>Index</PageTitle>

<button class="startButton" @onclick=Start>Start</button> 


<button class="modeButton" @onclick=Addition>+</button>
    <button class="modeButton" @onclick=Subtraction>-</button>
    <button class="modeButton" @onclick=Multiplication>x</button>
    <button class="modeButton" @onclick=Division>/</button>

  

<div id="gameDIV">

    <div class="base-timer">
      <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
        <g class="base-timer__circle">
          <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45" />
          <path
            id="base-timer-path-remaining"
            stroke-dasharray="283"
            class="base-timer__path-remaining"
            d="
              M 50, 50
              m -45, 0
              a 45,45 0 1,0 90,0
              a 45,45 0 1,0 -90,0
            "
          ></path>
        </g>
      </svg>
      <span id="base-timer-label" class="base-timer__label">
        @countdown
      </span>
    </div> 

    <p> @number @function @number2 </p>

    <input @onkeyup="Enter" @bind="InputValue"/>

    <p class="error"> @error </p>
    <p class="correct"> @goodJob </p> 

    <p class="score">Score: @score </p>
    <p id="gameOver"> @gameOver</p>

    <button id="backButton" @onclick=Back>Back</button>
    <button id="resetButton" @onclick=Reset>Reset</button>
</div>

<p class="highScore">High Score: @highScore</p>

@code {
    public string currentColour = "green";
    //game visibility 
    public string gameVisibilityStatus = "hidden";
    public string startButtonVisibility = "visible";
    public string modeButtonVisibility = "hidden";
    public string additionSubmitVisibility = "hidden";
    public string backButtonVisibility = "hidden";
    public string resetButtonVisibility = "hidden";

    //game mode
    string theOperation = "";

    //game over
    string gameOver = "Game Over";
    public string gameOverVisibility = "hidden";

    //high score
    int highScore = 0;


    //user input 
    private int? InputValue { get; set; }

    //equation 
    int number = 0;
    int number2 = 0;
    private int? answer { get; set; }
    string function = "";

    //processing correct/incorrect answer
    int score = 0;
    string error = "";
    string goodJob = "";
    bool submission = false;
    bool firstTime = true;
    bool restart = false;

    //countdown timer variables
    private static System.Timers.Timer aTimer;
    private int countdown = 60;

    private void Start()
    {
        modeButtonVisibility = "visible";
        startButtonVisibility = "hidden";
        backButtonVisibility = "visible";
    }

    public void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(StateHasChanged);

        if (countdown > 0)
        {
            countdown--;
        }
        else
        {
            if (countdown == 0)
            {
                resetButtonVisibility = "visible";
                backButtonVisibility = "hidden";
                gameVisibilityStatus = "hidden";
                gameOverVisibility = "visible";
                if (score > highScore)
                {
                    highScore = score;

                }
            }
        }
    }

    private void Addition()
    {
        theOperation = "addition";

        gameVisibilityStatus = "visible";
        modeButtonVisibility = "hidden";
        function = "+";

        Random rnd = new Random();
        number = rnd.Next(1, 10);
        number2 = rnd.Next(1,10);
        answer = number + number2;

        InputValue = null;
        aTimer = new System.Timers.Timer(1000);
        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
        countdown = 60;
    }

    public void Subtraction()
    {
        theOperation = "subtraction";

        gameVisibilityStatus = "visible";
        modeButtonVisibility = "hidden";
        function = "-";

        Random rnd = new Random();
        number2 = rnd.Next(1, 20);
        number = rnd.Next(number2, 20);
        answer = number - number2;  

        InputValue = null;
        aTimer = new System.Timers.Timer(1000);
        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
        countdown = 60;
    }

    private void Multiplication()
    {
        theOperation = "multiplication";
        gameVisibilityStatus = "visible";
        modeButtonVisibility = "hidden";
        function = "x";

        Random rnd = new Random();
        number = rnd.Next(1, 5);
        number2 = rnd.Next(1,5);
        answer = number*number2;

        InputValue = null;
        aTimer = new System.Timers.Timer(1000);
        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
        countdown = 60;
    }

    private void Division()
    {
        theOperation = "division";
        gameVisibilityStatus = "visible";
        modeButtonVisibility = "hidden";
        function = "/";

        Random rnd = new Random();
        number2 = rnd.Next(1,5);
        number = number2*rnd.Next(1, 5);
        answer = number/number2;

        InputValue = null;
        aTimer = new System.Timers.Timer(1000);
        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
        countdown = 60;
    }


    public void Enter(KeyboardEventArgs e)
    {
        if (e.Key != "Enter")
            return;
        submission = answer == InputValue;
        if (theOperation == "addition")
        {
            if (submission == true)
            {
                ++score;

                Random rnd = new Random();
                number = rnd.Next(1, 10);
                number2 = rnd.Next(1, 10);
                answer = number + number2;
                this.InputValue = null;

                error = "";
                goodJob = "good job";
            }
            else
            {
                error = "wrong";
                goodJob = "";
                this.InputValue = null;

                if (score > 0)
                    score--;

                if (score == 0)
                {
                    resetButtonVisibility = "visible";
                    backButtonVisibility = "hidden";
                    gameVisibilityStatus = "hidden";
                }
            }
        }

        if (theOperation == "subtraction")
        {
            if (submission == true)
            {
                ++score;

                Random rnd = new Random();
                number2 = rnd.Next(1, 20);
                number = rnd.Next(number2 - 1, 20);
                answer = number - number2;
                this.InputValue = null;

                error = "";
                goodJob = "good job";
            }
            else
            {
                goodJob = "";
                error = "wrong";
                this.InputValue = null;

                if (score > 0)
                    score--;

                if (score == 0)
                {
                    resetButtonVisibility = "visible";
                    backButtonVisibility = "hidden";
                    gameVisibilityStatus = "hidden";
                }
            }
        }

        if (theOperation == "multiplication")
        {
            if (submission == true)
            {
                ++score;

                Random rnd = new Random();
                number = rnd.Next(1, 6);
                number2 = rnd.Next(1, 6);
                answer = number*number2;
                this.InputValue = null;

                error = "";
                goodJob = "good job";
            }
            else
            {
                error = "wrong";
                goodJob = "";
                this.InputValue = null;

                if (score > 0)
                    score--;

                if (score == 0)
                {
                    resetButtonVisibility = "visible";
                    backButtonVisibility = "hidden";
                    gameVisibilityStatus = "hidden";
                }
            }
        }

        if (theOperation == "division")
        {
            if (submission == true)
            {
                ++score;

                Random rnd = new Random();
                number2 = rnd.Next(1,6);
                number = number2*rnd.Next(1, 6);
                answer = number/number2;
                this.InputValue = null;

                error = "";
                goodJob = "good job";
            }
            else
            {
                error = "wrong";
                goodJob = "";
                this.InputValue = null;

                if (score > 0)
                    score--;

                if (score == 0)
                {
                    resetButtonVisibility = "visible";
                    backButtonVisibility = "hidden";
                    gameVisibilityStatus = "hidden";
                }

            }
        }
    }

    private void Back()
    {
        gameVisibilityStatus = "hidden";
        modeButtonVisibility = "visible";
        score = 0;
        resetButtonVisibility = "hidden";
        countdown = 60;
        aTimer.Enabled = false;
        gameOver = "";
    }

    private void Reset()
    {
        gameVisibilityStatus = "hidden";
        startButtonVisibility = "visible";
        error = "";
        resetButtonVisibility = "hidden";

        countdown = 60;
        aTimer.Enabled = false;

        gameOver = "";
    }
    }
   
